use windows::Win32::Foundation::WPARAM;
use windows::Win32::UI::WindowsAndMessaging::{WM_KEYDOWN, WM_KEYUP, WM_SYSKEYDOWN, WM_SYSKEYUP};
use crate::event::keyboard::{KeyCode, KeyEvent};

impl KeyEvent {
    pub fn message(m: u32) -> bool {
        match m {
            WM_KEYDOWN | WM_SYSKEYDOWN | WM_KEYUP | WM_SYSKEYUP => true,
            _ => false,
        }
    }
}

impl From<WPARAM> for KeyCode {
    fn from(v: WPARAM) -> Self {
        // Try virtual key, then try normal key, then try char conversion, if nothing works then return unknown with the raw value
        match v.0 {
            0x03 => KeyCode::Cancel,
            0x08 => KeyCode::Back,
            0x09 => KeyCode::Tab,
            0x0c => KeyCode::Clear,
            0x0d => KeyCode::Return,
            0x10 => KeyCode::Shift,
            0x11 => KeyCode::Control,
            0x12 => KeyCode::Alt,
            0x13 => KeyCode::Pause,
            0x14 => KeyCode::Capital,
            0x15 => KeyCode::KanaHangul,
            0x17 => KeyCode::Junja,
            0x18 => KeyCode::Final,
            0x19 => KeyCode::Kanji,
            0x1b => KeyCode::Escape,
            0x1c => KeyCode::Convert,
            0x1d => KeyCode::NonConvert,
            0x1e => KeyCode::Accept,
            0x1f => KeyCode::ModeChange,
            0x20 => KeyCode::Space,
            0x21 => KeyCode::PageUp,
            0x22 => KeyCode::PageDown,
            0x23 => KeyCode::End,
            0x24 => KeyCode::Home,
            0x25 => KeyCode::Left,
            0x26 => KeyCode::Up,
            0x27 => KeyCode::Right,
            0x28 => KeyCode::Down,
            0x29 => KeyCode::Select,
            0x2a => KeyCode::Print,
            0x2b => KeyCode::Execute,
            0x2c => KeyCode::Snapshot,
            0x2d => KeyCode::Insert,
            0x2e => KeyCode::Delete,
            0x2f => KeyCode::Help,
            0x5b => KeyCode::LWin,
            0x5c => KeyCode::RWin,
            0x5d => KeyCode::Apps,
            0x5f => KeyCode::Sleep,
            0x60 => KeyCode::NumPad0,
            0x61 => KeyCode::NumPad1,
            0x62 => KeyCode::NumPad2,
            0x63 => KeyCode::NumPad3,
            0x64 => KeyCode::NumPad4,
            0x65 => KeyCode::NumPad5,
            0x66 => KeyCode::NumPad6,
            0x67 => KeyCode::NumPad7,
            0x68 => KeyCode::NumPad8,
            0x69 => KeyCode::NumPad9,
            0x6a => KeyCode::Multiply,
            0x6b => KeyCode::Add,
            0x6c => KeyCode::Separator,
            0x6d => KeyCode::Subtract,
            0x6e => KeyCode::Decimal,
            0x6f => KeyCode::Divide,
            0x70 => KeyCode::F1,
            0x71 => KeyCode::F2,
            0x72 => KeyCode::F3,
            0x73 => KeyCode::F4,
            0x74 => KeyCode::F5,
            0x75 => KeyCode::F6,
            0x76 => KeyCode::F7,
            0x77 => KeyCode::F8,
            0x78 => KeyCode::F9,
            0x79 => KeyCode::F10,
            0x7a => KeyCode::F11,
            0x7b => KeyCode::F12,
            0x7c => KeyCode::F13,
            0x7d => KeyCode::F14,
            0x7e => KeyCode::F15,
            0x7f => KeyCode::F16,
            0x80 => KeyCode::F17,
            0x81 => KeyCode::F18,
            0x82 => KeyCode::F19,
            0x83 => KeyCode::F20,
            0x84 => KeyCode::F21,
            0x85 => KeyCode::F22,
            0x86 => KeyCode::F23,
            0x87 => KeyCode::F24,
            0x90 => KeyCode::NumLock,
            0x91 => KeyCode::Scroll,
            0xa0 => KeyCode::LShift,
            0xa1 => KeyCode::RShift,
            0xa2 => KeyCode::LControl,
            0xa3 => KeyCode::RControl,
            0xa4 => KeyCode::LAlt,
            0xa5 => KeyCode::RAlt,
            0xa6 => KeyCode::BrowserBack,
            0xa7 => KeyCode::BrowserForward,
            0xa8 => KeyCode::BrowserRefresh,
            0xa9 => KeyCode::BrowserStop,
            0xaa => KeyCode::BrowserSearch,
            0xab => KeyCode::BrowserFavorites,
            0xac => KeyCode::BrowserHome,
            0xad => KeyCode::VolumeMute,
            0xae => KeyCode::VolumeDown,
            0xaf => KeyCode::VolumeUp,
            0xb0 => KeyCode::MediaNext,
            0xb1 => KeyCode::MediaPrev,
            0xb2 => KeyCode::MediaStop,
            0xb3 => KeyCode::MediaPlayPause,
            0xb4 => KeyCode::LaunchMail,
            0xb5 => KeyCode::LaunchMediaSelect,
            0xb6 => KeyCode::LaunchApp1,
            0xb7 => KeyCode::LaunchApp2,
            0xdf => KeyCode::OEM8,
            0xe2 => KeyCode::OEM102,
            0xe5 => KeyCode::ProcessKey,
            0xe7 => KeyCode::Packet,
            0xf6 => KeyCode::Attention,
            0xf7 => KeyCode::CrSel,
            0xf8 => KeyCode::ExSel,
            0xf9 => KeyCode::EraseEof,
            0xfa => KeyCode::Play,
            0xfb => KeyCode::Zoom,
            0xfc => KeyCode::NoName,
            0xfd => KeyCode::Pa1,
            0xfe => KeyCode::OEMClear,
            0xbb => KeyCode::Char('+'),
            0xbc => KeyCode::Char(','),
            0xbd => KeyCode::Char('-'),
            0xbe => KeyCode::Char('.'),
            0xbf => KeyCode::Char('/'),
            0xc0 => KeyCode::Char('~'),
            0xdc => KeyCode::Char('\\'),
            0xdb => KeyCode::Char('['),
            0xdd => KeyCode::Char(']'),
            0xde => KeyCode::Char('\''),
            0xba => KeyCode::Char(';'),
            char => {
                match char::from_u32(char as u32) {
                    Some(v) => {
                        if v.is_alphabetic() {
                            KeyCode::Char(v.to_ascii_lowercase())
                        } else {
                            KeyCode::Char(v)
                        }
                    },
                    None => KeyCode::Unkown(char as isize)
                }
            }
        }
    }
}
